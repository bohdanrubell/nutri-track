// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NutriTrack.Data;

#nullable disable

namespace NutriTrack.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NutriTrack.Entities.ActivityLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ratio")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ActivityLevels", (string)null);
                });

            modelBuilder.Entity("NutriTrack.Entities.ActivityLevelLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLevelLogs", (string)null);
                });

            modelBuilder.Entity("NutriTrack.Entities.Diary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateDiaryCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Diaries", (string)null);
                });

            modelBuilder.Entity("NutriTrack.Entities.GoalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GoalTypes", (string)null);
                });

            modelBuilder.Entity("NutriTrack.Entities.GoalTypeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoalTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GoalTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("GoalTypeLogs", (string)null);
                });

            modelBuilder.Entity("NutriTrack.Entities.ProductNutrition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CaloriesPer100Grams")
                        .HasColumnType("decimal(5,1)");

                    b.Property<decimal>("CarbohydratesPer100Grams")
                        .HasColumnType("decimal(5,1)");

                    b.Property<decimal>("FatPer100Grams")
                        .HasColumnType("decimal(5,1)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductNutritionCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProteinPer100Grams")
                        .HasColumnType("decimal(5,1)");

                    b.HasKey("Id");

                    b.HasIndex("ProductNutritionCategoryId");

                    b.ToTable("ProductNutritions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CaloriesPer100Grams = 52m,
                            CarbohydratesPer100Grams = 14m,
                            FatPer100Grams = 0m,
                            IsDeleted = false,
                            Name = "Яблуко",
                            ProductNutritionCategoryId = 1,
                            ProteinPer100Grams = 0m
                        },
                        new
                        {
                            Id = 2,
                            CaloriesPer100Grams = 96m,
                            CarbohydratesPer100Grams = 23m,
                            FatPer100Grams = 0m,
                            IsDeleted = false,
                            Name = "Банан",
                            ProductNutritionCategoryId = 1,
                            ProteinPer100Grams = 1m
                        },
                        new
                        {
                            Id = 3,
                            CaloriesPer100Grams = 47m,
                            CarbohydratesPer100Grams = 12m,
                            FatPer100Grams = 0m,
                            IsDeleted = false,
                            Name = "Апельсин",
                            ProductNutritionCategoryId = 1,
                            ProteinPer100Grams = 1m
                        },
                        new
                        {
                            Id = 4,
                            CaloriesPer100Grams = 32m,
                            CarbohydratesPer100Grams = 8m,
                            FatPer100Grams = 0m,
                            IsDeleted = false,
                            Name = "Полуниця",
                            ProductNutritionCategoryId = 1,
                            ProteinPer100Grams = 1m
                        },
                        new
                        {
                            Id = 5,
                            CaloriesPer100Grams = 69m,
                            CarbohydratesPer100Grams = 18m,
                            FatPer100Grams = 0m,
                            IsDeleted = false,
                            Name = "Виноград",
                            ProductNutritionCategoryId = 1,
                            ProteinPer100Grams = 1m
                        },
                        new
                        {
                            Id = 6,
                            CaloriesPer100Grams = 41m,
                            CarbohydratesPer100Grams = 10m,
                            FatPer100Grams = 0m,
                            IsDeleted = false,
                            Name = "Морковка",
                            ProductNutritionCategoryId = 2,
                            ProteinPer100Grams = 1m
                        },
                        new
                        {
                            Id = 7,
                            CaloriesPer100Grams = 55m,
                            CarbohydratesPer100Grams = 11m,
                            FatPer100Grams = 0m,
                            IsDeleted = false,
                            Name = "Броколі",
                            ProductNutritionCategoryId = 2,
                            ProteinPer100Grams = 4m
                        },
                        new
                        {
                            Id = 8,
                            CaloriesPer100Grams = 18m,
                            CarbohydratesPer100Grams = 4m,
                            FatPer100Grams = 0m,
                            IsDeleted = false,
                            Name = "Помідор",
                            ProductNutritionCategoryId = 2,
                            ProteinPer100Grams = 1m
                        },
                        new
                        {
                            Id = 9,
                            CaloriesPer100Grams = 23m,
                            CarbohydratesPer100Grams = 4m,
                            FatPer100Grams = 0m,
                            IsDeleted = false,
                            Name = "Шпинат",
                            ProductNutritionCategoryId = 2,
                            ProteinPer100Grams = 3m
                        },
                        new
                        {
                            Id = 10,
                            CaloriesPer100Grams = 16m,
                            CarbohydratesPer100Grams = 4m,
                            FatPer100Grams = 0m,
                            IsDeleted = false,
                            Name = "Огірок",
                            ProductNutritionCategoryId = 2,
                            ProteinPer100Grams = 1m
                        },
                        new
                        {
                            Id = 11,
                            CaloriesPer100Grams = 42m,
                            CarbohydratesPer100Grams = 5m,
                            FatPer100Grams = 1m,
                            IsDeleted = false,
                            Name = "Молоко",
                            ProductNutritionCategoryId = 3,
                            ProteinPer100Grams = 3m
                        },
                        new
                        {
                            Id = 12,
                            CaloriesPer100Grams = 59m,
                            CarbohydratesPer100Grams = 7m,
                            FatPer100Grams = 2m,
                            IsDeleted = false,
                            Name = "Йогурт",
                            ProductNutritionCategoryId = 3,
                            ProteinPer100Grams = 3m
                        },
                        new
                        {
                            Id = 13,
                            CaloriesPer100Grams = 402m,
                            CarbohydratesPer100Grams = 1m,
                            FatPer100Grams = 33m,
                            IsDeleted = false,
                            Name = "Сир",
                            ProductNutritionCategoryId = 3,
                            ProteinPer100Grams = 25m
                        },
                        new
                        {
                            Id = 14,
                            CaloriesPer100Grams = 717m,
                            CarbohydratesPer100Grams = 0m,
                            FatPer100Grams = 81m,
                            IsDeleted = false,
                            Name = "Масло",
                            ProductNutritionCategoryId = 3,
                            ProteinPer100Grams = 1m
                        },
                        new
                        {
                            Id = 15,
                            CaloriesPer100Grams = 98m,
                            CarbohydratesPer100Grams = 3m,
                            FatPer100Grams = 4m,
                            IsDeleted = false,
                            Name = "Сир кисломолочий",
                            ProductNutritionCategoryId = 3,
                            ProteinPer100Grams = 11m
                        },
                        new
                        {
                            Id = 16,
                            CaloriesPer100Grams = 165m,
                            CarbohydratesPer100Grams = 0m,
                            FatPer100Grams = 4m,
                            IsDeleted = false,
                            Name = "Курине філе",
                            ProductNutritionCategoryId = 4,
                            ProteinPer100Grams = 31m
                        },
                        new
                        {
                            Id = 17,
                            CaloriesPer100Grams = 250m,
                            CarbohydratesPer100Grams = 0m,
                            FatPer100Grams = 15m,
                            IsDeleted = false,
                            Name = "Яловичина",
                            ProductNutritionCategoryId = 4,
                            ProteinPer100Grams = 26m
                        },
                        new
                        {
                            Id = 18,
                            CaloriesPer100Grams = 242m,
                            CarbohydratesPer100Grams = 0m,
                            FatPer100Grams = 14m,
                            IsDeleted = false,
                            Name = "Свинячий стейк",
                            ProductNutritionCategoryId = 4,
                            ProteinPer100Grams = 27m
                        },
                        new
                        {
                            Id = 19,
                            CaloriesPer100Grams = 189m,
                            CarbohydratesPer100Grams = 0m,
                            FatPer100Grams = 7m,
                            IsDeleted = false,
                            Name = "Індичка",
                            ProductNutritionCategoryId = 4,
                            ProteinPer100Grams = 29m
                        },
                        new
                        {
                            Id = 20,
                            CaloriesPer100Grams = 294m,
                            CarbohydratesPer100Grams = 0m,
                            FatPer100Grams = 21m,
                            IsDeleted = false,
                            Name = "Каре ягня",
                            ProductNutritionCategoryId = 4,
                            ProteinPer100Grams = 25m
                        });
                });

            modelBuilder.Entity("NutriTrack.Entities.ProductNutritionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductNutritionCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Фрукти"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Овочі"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Молочні продукти"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "М'ясо"
                        });
                });

            modelBuilder.Entity("NutriTrack.Entities.ProductRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Grams")
                        .HasColumnType("decimal(5,1)");

                    b.Property<int>("ProductNutritionId")
                        .HasColumnType("int");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductNutritionId");

                    b.HasIndex("RecordId");

                    b.ToTable("ProductRecords", (string)null);
                });

            modelBuilder.Entity("NutriTrack.Entities.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityLogId")
                        .HasColumnType("int");

                    b.Property<int>("DailyCalories")
                        .HasColumnType("int");

                    b.Property<decimal>("DailyCarbohydrates")
                        .HasColumnType("decimal(5,1)");

                    b.Property<decimal>("DailyFat")
                        .HasColumnType("decimal(5,1)");

                    b.Property<decimal>("DailyProtein")
                        .HasColumnType("decimal(5,1)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiaryId")
                        .HasColumnType("int");

                    b.Property<int>("GoalLogId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityLogId");

                    b.HasIndex("DiaryId");

                    b.HasIndex("GoalLogId");

                    b.ToTable("Records", (string)null);
                });

            modelBuilder.Entity("NutriTrack.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NutriTrack.Entities.WeightRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfRecordCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WeightRecords", (string)null);
                });

            modelBuilder.Entity("NutriTrack.Entity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("990226bd-1bd9-4217-8d91-38af2cd4c1d5"),
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("a769d765-23f0-487d-9ed8-2b1ecd2b551e"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("NutriTrack.Entity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("NutriTrack.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("NutriTrack.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("NutriTrack.Entity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutriTrack.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("NutriTrack.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NutriTrack.Entities.ActivityLevelLog", b =>
                {
                    b.HasOne("NutriTrack.Entities.ActivityLevel", "ActivityLevel")
                        .WithMany("Logs")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutriTrack.Entities.User", "User")
                        .WithMany("ActivityLevelLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityLevel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NutriTrack.Entities.Diary", b =>
                {
                    b.HasOne("NutriTrack.Entities.User", "User")
                        .WithOne("Diary")
                        .HasForeignKey("NutriTrack.Entities.Diary", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NutriTrack.Entities.GoalTypeLog", b =>
                {
                    b.HasOne("NutriTrack.Entities.GoalType", "Goal")
                        .WithMany("Logs")
                        .HasForeignKey("GoalTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutriTrack.Entities.User", "User")
                        .WithMany("GoalTypeLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NutriTrack.Entities.ProductNutrition", b =>
                {
                    b.HasOne("NutriTrack.Entities.ProductNutritionCategory", "ProductNutritionCategory")
                        .WithMany("ProductNutritions")
                        .HasForeignKey("ProductNutritionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductNutritionCategory");
                });

            modelBuilder.Entity("NutriTrack.Entities.ProductRecord", b =>
                {
                    b.HasOne("NutriTrack.Entities.ProductNutrition", "ProductNutrition")
                        .WithMany("ProductRecords")
                        .HasForeignKey("ProductNutritionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutriTrack.Entities.Record", "Record")
                        .WithMany("ProductRecords")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductNutrition");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("NutriTrack.Entities.Record", b =>
                {
                    b.HasOne("NutriTrack.Entities.ActivityLevelLog", "ActivityLog")
                        .WithMany()
                        .HasForeignKey("ActivityLogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NutriTrack.Entities.Diary", "Diary")
                        .WithMany("Records")
                        .HasForeignKey("DiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutriTrack.Entities.GoalTypeLog", "GoalLog")
                        .WithMany()
                        .HasForeignKey("GoalLogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityLog");

                    b.Navigation("Diary");

                    b.Navigation("GoalLog");
                });

            modelBuilder.Entity("NutriTrack.Entities.WeightRecord", b =>
                {
                    b.HasOne("NutriTrack.Entities.User", "User")
                        .WithMany("WeightRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NutriTrack.Entities.ActivityLevel", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("NutriTrack.Entities.Diary", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("NutriTrack.Entities.GoalType", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("NutriTrack.Entities.ProductNutrition", b =>
                {
                    b.Navigation("ProductRecords");
                });

            modelBuilder.Entity("NutriTrack.Entities.ProductNutritionCategory", b =>
                {
                    b.Navigation("ProductNutritions");
                });

            modelBuilder.Entity("NutriTrack.Entities.Record", b =>
                {
                    b.Navigation("ProductRecords");
                });

            modelBuilder.Entity("NutriTrack.Entities.User", b =>
                {
                    b.Navigation("ActivityLevelLogs");

                    b.Navigation("Diary")
                        .IsRequired();

                    b.Navigation("GoalTypeLogs");

                    b.Navigation("WeightRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
